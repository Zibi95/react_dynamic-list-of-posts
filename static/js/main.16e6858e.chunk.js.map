{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/Input.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","hooks/useItems.ts","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setSelectedPost","selectedPostId","className","map","post","id","title","type","classNames","onClick","handleClick","Loader","Input","label","icon","errorMsg","isError","data","attr","htmlFor","initialFormData","name","email","body","initialFormErrors","NewCommentForm","postId","handleAddComment","useState","formData","setformData","formErrors","setformErrors","loading","setLoading","handleInputChange","e","target","prevErrors","prevData","value","handleSubmitForm","a","preventDefault","isValid","Object","keys","forEach","key","nameError","emailError","bodyError","inputs","placeholder","onSubmit","input","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","useItems","items","setItems","setErrorMsg","handleItemsFetch","msg","handleItemPost","item","prevItems","handleItemDelete","filter","prevItem","CommentsList","comments","handleDeleteComment","bind","href","PostDetails","selectedPost","formOpen","setFormOpen","useEffect","length","UserSelector","users","setSelectedUser","selectedUser","dropdownOpen","setDropdownOpen","handleClickOutside","document","addEventListener","role","user","onMouseDown","App","setUsers","catch","handleUserSelect","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.16e6858e.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype PostListProps = {\n  posts: Post[] | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  selectedPostId: number | undefined;\n};\n\nexport const PostsList = ({\n  posts,\n  setSelectedPost,\n  selectedPostId,\n}: PostListProps) => {\n  const handleClick = (post: Post) => {\n    if (selectedPostId && selectedPostId === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPostId !== post.id },\n                  )}\n                  onClick={() => handleClick(post)}\n                >\n                  {selectedPostId !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\n\ntype InputProps = {\n  label: string;\n  name: string;\n  id: string;\n  placeholder: string;\n  icon: string;\n  errorMsg: string;\n  isError: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  data: string;\n};\n\nexport const Input = ({\n  label, id, icon, errorMsg, isError, data, ...attr\n}: InputProps) => {\n  return (\n    <div className=\"field\" data-cy={data}>\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          {...attr}\n          id={id}\n          className={classNames('input', { 'is-danger': isError })}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className={`fas ${icon}`} />\n        </span>\n\n        {isError && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {isError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {errorMsg}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport classNames from 'classnames';\nimport { Input } from './Input';\nimport { CommentData } from '../types/Comment';\n\ntype FormData = {\n  name: string;\n  email: string;\n  body: string;\n};\n\ntype FormErrors = {\n  name: boolean;\n  email: boolean;\n  body: boolean;\n};\n\ntype NewCommentFormProps = {\n  postId?: number;\n  handleAddComment: (data: any, url: string, msg: string) => Promise<void>;\n};\n\nconst initialFormData: FormData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst initialFormErrors: FormErrors = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nexport const NewCommentForm = ({\n  postId,\n  handleAddComment,\n}: NewCommentFormProps) => {\n  const [formData, setformData] = useState<FormData>(initialFormData);\n  const [formErrors, setformErrors] = useState<FormErrors>(initialFormErrors);\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (formErrors[e.target.name as keyof FormErrors]) {\n      setformErrors((prevErrors) => ({\n        ...prevErrors,\n        [e.target.name]: false,\n      }));\n    }\n\n    setformData((prevData) => ({\n      ...prevData,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleClearButton = () => {\n    setformErrors(initialFormErrors);\n    setformData(initialFormData);\n  };\n\n  const handleSubmitForm: React.FormEventHandler = async (e) => {\n    e.preventDefault();\n    let isValid = true;\n\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key as keyof FormData]) {\n        setformErrors((prevErrors) => ({ ...prevErrors, [key]: true }));\n        isValid = false;\n      }\n    });\n\n    if (isValid && postId) {\n      setLoading(true);\n\n      const data: CommentData = {\n        ...formData,\n        postId,\n      };\n\n      await handleAddComment(\n        data,\n        '/comments',\n        'Unable to add comment',\n      );\n\n      setLoading(false);\n      setformData((prevData) => ({ ...prevData, body: '' }));\n    }\n  };\n\n  const { name, email, body } = formData;\n  const { name: nameError, email: emailError, body: bodyError } = formErrors;\n\n  const inputs = [\n    {\n      label: 'Author name',\n      name: 'name',\n      id: 'comment-author-name',\n      value: name,\n      placeholder: 'Name Surname',\n      icon: 'fa-user',\n      errorMsg: 'Name is required',\n      isError: nameError,\n      data: 'NameField',\n    },\n    {\n      label: 'Author email',\n      name: 'email',\n      id: 'comment-author-email',\n      value: email,\n      placeholder: 'email@test.com',\n      icon: 'fa-envelope',\n      errorMsg: 'Email is required',\n      isError: emailError,\n      data: 'EmailField',\n    },\n  ];\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmitForm}>\n      {inputs.map((input) => (\n        <Input key={input.id} {...input} onChange={handleInputChange} />\n      ))}\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={body}\n            onChange={handleInputChange}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': bodyError })}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { useState } from 'react';\nimport { client } from '../utils/fetchClient';\n\nexport const useItems = <T extends { id : number }>() => {\n  const [items, setItems] = useState<T[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleItemsFetch = async (url: string, id: number, msg: string) => {\n    setItems(null);\n    setErrorMsg('');\n    setLoading(true);\n\n    try {\n      setItems(await client.get(`${url}${id}`));\n\n      setLoading(false);\n    } catch {\n      setErrorMsg(msg);\n      setLoading(false);\n    }\n  };\n\n  const handleItemPost = async (data: any, url: string, msg: string) => {\n    setErrorMsg('');\n\n    try {\n      const item: T = await client.post(url, data);\n\n      setItems((prevItems) => {\n        if (prevItems) {\n          return [...prevItems, item];\n        }\n\n        return [item];\n      });\n    } catch {\n      setErrorMsg(msg);\n    }\n  };\n\n  const handleItemDelete = (\n    url: string,\n    msg: string,\n    id: number,\n  ) => {\n    setErrorMsg('');\n\n    try {\n      client.delete(`${url}${id}`);\n\n      setItems((prevItems) => {\n        if (prevItems) {\n          return prevItems?.filter((prevItem) => prevItem.id !== id);\n        }\n\n        return null;\n      });\n    } catch {\n      setErrorMsg(msg);\n    }\n  };\n\n  return {\n    items,\n    loading,\n    errorMsg,\n    handleItemsFetch,\n    setErrorMsg,\n    setLoading,\n    handleItemPost,\n    handleItemDelete,\n  };\n};\n","import { Comment } from '../types/Comment';\n\ntype CommentsListProps = {\n  comments: Comment[];\n  handleDeleteComment: (url: string, msg: string, id: number) => void;\n};\n\nexport const CommentsList = ({\n  comments,\n  handleDeleteComment,\n}: CommentsListProps) => {\n  const handleClick = handleDeleteComment.bind(\n    this,\n    '/comments/',\n    'Unable to remove comment',\n  );\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(({\n        email, name, body, id,\n      }) => (\n        <article key={id} className=\"message is-small\" data-cy=\"Comment\">\n          <div className=\"message-header\">\n            <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n              {name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleClick(id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { useItems } from '../hooks/useItems';\nimport { Comment } from '../types/Comment';\nimport { CommentsList } from './CommentsList';\n\ntype PostDetailsProps = {\n  selectedPost: Post | null;\n};\n\nexport const PostDetails = ({ selectedPost }: PostDetailsProps) => {\n  const [formOpen, setFormOpen] = useState(false);\n  const {\n    handleItemsFetch,\n    handleItemPost,\n    handleItemDelete,\n    loading,\n    errorMsg,\n    items: comments,\n  } = useItems<Comment>();\n\n  useEffect(() => {\n    setFormOpen(false);\n\n    if (selectedPost) {\n      handleItemsFetch(\n        '/comments?postId=',\n        selectedPost.id,\n        'Unable to fetch comments',\n      );\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {errorMsg && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMsg}\n            </div>\n          )}\n\n          {comments\n            && (comments.length === 0 ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <CommentsList\n                comments={comments}\n                handleDeleteComment={handleItemDelete}\n              />\n            ))}\n\n          {!formOpen && !loading && !errorMsg && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {formOpen && (\n          <NewCommentForm\n            postId={selectedPost?.id}\n            handleAddComment={handleItemPost}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype UserSelectorProps = {\n  users: User[];\n  setSelectedUser: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector = ({\n  users,\n  setSelectedUser,\n  selectedUser,\n}: UserSelectorProps) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const handleClick = (user: User) => {\n    setSelectedUser(user);\n    setDropdownOpen(false);\n  };\n\n  const handleClickOutside = () => {\n    if (!dropdownOpen) {\n      setDropdownOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.body.addEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdownOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownOpen(!dropdownOpen)}\n        >\n          <span>{selectedUser?.name ?? 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div\n          className={classNames('dropdown-content', {\n            'is-hidden': !dropdownOpen,\n          })}\n        >\n          {users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onMouseDown={() => handleClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport './App.scss';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\nimport { useItems } from './hooks/useItems';\n\nexport const App = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const {\n    setErrorMsg, handleItemsFetch, loading, errorMsg, items: posts,\n  }\n    = useItems<Post>();\n\n  useEffect(() => {\n    client\n      .get<User[]>('/users')\n      .then(setUsers)\n      .catch(() => setErrorMsg('Unable to load users - reload'));\n  }, []);\n\n  const handleUserSelect = async (user: User) => {\n    if (user.id === selectedUser?.id) {\n      return;\n    }\n\n    setSelectedUser(null);\n    setSelectedPost(null);\n\n    handleItemsFetch('/posts?userId=', user.id, 'Unable to fetch Posts');\n\n    setSelectedUser(user);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={handleUserSelect}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !errorMsg && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {loading && <Loader />}\n\n                {errorMsg && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMsg}\n                  </div>\n                )}\n\n                {posts\n                  && (posts.length === 0 ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList\n                      posts={posts}\n                      setSelectedPost={setSelectedPost}\n                      selectedPostId={selectedPost?.id}\n                    />\n                  ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails selectedPost={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}